@using HaarlemFestival.Models
@using System.Text.RegularExpressions
@model TicketSalesViewModel
<div class="event-banner"></div>
<div class="container">
    <script src="http://www.chartjs.org/dist/2.7.1/Chart.bundle.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {
                // Inkomen ophalen en chart met inkomen aanmaken
                var jazzIncome = @Model.BesteldeActiviteiten.Where(a => a.Activiteit.EventType == EventType.JazzPatronaat).Sum(a => a.Price);
                var dinnerIncome = @Model.BesteldeActiviteiten.Where(a => a.Activiteit.EventType == EventType.DinnerInHaarlem).Sum(a => a.Price);
                var talkingIncome = @Model.BesteldeActiviteiten.Where(a => a.Activiteit.EventType == EventType.TalkingHaarlem).Sum(a => a.Price);
                var historicIncome = @Model.BesteldeActiviteiten.Where(a => a.Activiteit.EventType == EventType.HistoricHaarlem).Sum(a => a.Price);
                CreateIncomeChart("incomeChart", jazzIncome, dinnerIncome, talkingIncome, historicIncome);

                // De Beschikbare en Verkochte tickets over het gehele evenement in een Doughnut Chart zetten.
                CreateTicketAvailabilityChart("availabilityChart", @Model.Activities.Sum(a => a.TotalTickets), @Model.Activities.Sum(a => a.BoughtTickets));

                // Per evenement de Beschikbare en Verkochte tickets in een Doughnut Chart zetten.
                CreateTicketAvailabilityChart("jazzAvailabilityChart", @Model.Activities.Where(a => a.EventType == EventType.JazzPatronaat).Sum(a => a.TotalTickets), @Model.Activities.Where(a => a.EventType == EventType.JazzPatronaat).Sum(a => a.BoughtTickets));
                CreateTicketAvailabilityChart("dinnerAvailabilityChart", @Model.Activities.Where(a => a.EventType == EventType.DinnerInHaarlem).Sum(a => a.TotalTickets), @Model.Activities.Where(a => a.EventType == EventType.DinnerInHaarlem).Sum(a => a.BoughtTickets));
                CreateTicketAvailabilityChart("talkingAvailabilityChart", @Model.Activities.Where(a => a.EventType == EventType.TalkingHaarlem).Sum(a => a.TotalTickets), @Model.Activities.Where(a => a.EventType == EventType.TalkingHaarlem).Sum(a => a.BoughtTickets));
                CreateTicketAvailabilityChart("historicAvailabilityChart", @Model.Activities.Where(a => a.EventType == EventType.HistoricHaarlem).Sum(a => a.TotalTickets), @Model.Activities.Where(a => a.EventType == EventType.HistoricHaarlem).Sum(a => a.BoughtTickets));

                CreateJazzIncomeChart("jazzIncomeChart");
                CreateDinnerIncomeChart("dinnerIncomeChart");
                CreateTalkingIncomeChart("talkingIncomeChart");
                CreateHistoricIncomeChart("historicIncomeChart");
        });


        function CreateJazzIncomeChart(id) {
            var jazzData;
            jazzData += [@Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Monday).Sum(b => b.Price),
                         @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Tuesday).Sum(b => b.Price),
                         @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Wednesday).Sum(b => b.Price),
                         @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Thursday).Sum(b => b.Price),
                         @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Friday).Sum(b => b.Price),
                         @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Saturday).Sum(b => b.Price),
                         @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.JazzPatronaat && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Sunday).Sum(b => b.Price)];

            CreateIncomePerDayChart(id, jazzData)
        }

        function CreateDinnerIncomeChart(id) {
            var dinnerData;
            dinnerData += [@Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Monday).Sum(b => b.Price),
                           @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Tuesday).Sum(b => b.Price),
                           @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Wednesday).Sum(b => b.Price),
                           @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Thursday).Sum(b => b.Price),
                           @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Friday).Sum(b => b.Price),
                           @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Saturday).Sum(b => b.Price),
                           @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.DinnerInHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Sunday).Sum(b => b.Price)];

            CreateIncomePerDayChart(id, dinnerData)
        }

        function CreateTalkingIncomeChart(id) {
            var talkingData;
            talkingData += [@Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Monday).Sum(b => b.Price),
                            @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Tuesday).Sum(b => b.Price),
                            @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Wednesday).Sum(b => b.Price),
                            @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Thursday).Sum(b => b.Price),
                            @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Friday).Sum(b => b.Price),
                            @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Saturday).Sum(b => b.Price),
                            @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.TalkingHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Sunday).Sum(b => b.Price)];

            CreateIncomePerDayChart(id, talkingData)
        }

        function CreateHistoricIncomeChart(id) {
            var historicData;
            historicData += [@Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Monday).Sum(b => b.Price),
                             @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Tuesday).Sum(b => b.Price),
                             @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Wednesday).Sum(b => b.Price),
                             @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Thursday).Sum(b => b.Price),
                             @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Friday).Sum(b => b.Price),
                             @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Saturday).Sum(b => b.Price),
                             @Model.BesteldeActiviteiten.Where(b => b.Activiteit.EventType == EventType.HistoricHaarlem && b.Activiteit.StartSession.DayOfWeek == DayOfWeek.Sunday).Sum(b => b.Price)];

            CreateIncomePerDayChart(id, historicdata)
        }

        function SelectedEventChanged() {
            // Alle Data Tabellen verbergen.
            $('.eventView').each(function () {
                $(this).hide();
                })

            // Alle filters verbergen.
            $('.eventFilter').each(function () {
                $(this).hide();
                })

            // Aan de hand van een evenement de data en filters tonen.
            switch ($('#selectedEvent').val()) {
                case "Jazz@Patronaat":
                    $('#jazzData').show();
                    $('#dates').show();
                    break;

                case "DinnerInHaarlem":
                    $('#dinnerData').show();
                    $('#dates').show();
                    $('#restaurants').show();
                    break;

                case "TalkingHaarlem":
                    $('#talkingData').show();
                    $('#dates').show();
                    break;

                case "HistoricHaarlem":
                    $('#historicData').show();
                    $('#dates').show();
                    break;

                    default:
                    $('#jazzData').show();
                    $('#dinnerData').show();
                    $('#talkingData').show();
                    $('#historicData').show();
                    $('#dates').show();
                    break;
                }
            }

        // Data uit de tabel filteren.
        function FilterData() {
            var filters = [];


            // Voor elke filter
            $('.eventFilter').each(function () {

                if ($(this).val() != "") // Als de filter is geselecteerd.
                {
                    filters.push($(this).val()) // Filter toevoegen.
                }
            })


            // TEST: Alle Filters in de console neerzetten.
            console.log(filters);

            // Alle rows van de table vinden.
            var div = $(".eventView").find(".eventData");
            div.hide(); // Alle rows van de table verbergen.

            // Als er geen filter is geselecteerd.
            if (filters.length == 0) {
                div.show(); // Alle rijen laten zien.
                return; // Uit de functie gaan.
            }

            // Elke rij filteren.
            div.filter(function () {
                var $t = $(this);
                for (var index = 0; index < filters.length; ++index) {

                    if ($t.is(":not(:contains('" + filters[index] + "'))")) // Als de rij niet voldoet aan de filters
                    {
                        return false; // Rij verbergen.
                    }
                }

                return true; // Rij laten zien.
            })
                .show();
        }

    </script>

    <section id="topFilterBar" class="col-md-12">
        <div id="selectEvent" class="col-md-3 col-sm-12">
            <b>Select an event</b>
            <br />
            <select id="selectedEvent" name="selectedEvent" onchange="SelectedEventChanged()">
                <option value="">Select an event.</option>
                <option value="Jazz@Patronaat">Jazz@Patronaat</option>
                <option value="DinnerInHaarlem">Dinner in Haarlem</option>
                <option value="TalkingHaarlem">Talking Haarlem</option>
                <option value="HistoricHaarlem">Historic Haarlem</option>
            </select>
        </div>

        <div id="filterSystem" class="col-md-9 col-sm-12">
            <div class="col-md-3 eventFilter" id="dates">
                <b>Select a date.</b>
                <br />
                @Html.DropDownListFor(m => m.Filters.dateFilter, new SelectList(Model.Filters.dateFilter, "DateDisplay", "DateDisplay"), "Select a Date.", new { @id = "dateFilter", @class = "filters", @onchange = "FilterData()" })
            </div>
            <div class="col-md-3 eventFilter" id="restaurants">
                <b>Select a restaurant.</b>
                <br />
                @Html.DropDownListFor(m => m.Filters.restaurantFilter, new SelectList(Model.Filters.restaurantFilter, "Naam", "Naam"), "Select a Restaurant", new { @id = "restaurantFilter", @class = "filters", @onchange = "FilterData()" })
            </div>
        </div>
    </section>

    <!-- Charts over het gehele evenement.-->
    <div class="row col-md-12">
        <div class="col-md-12 col-sm-12 text-center">
            <h2>General Information</h2>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="incomeChart" width="800" height="450"></canvas>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="availabilityChart" width="800" height="450"></canvas>
        </div>
    </div>

    <hr class="divide" />

    <!-- Charts over het Jazz evenement.-->
    <div class="row col-md-12">
        <div class="col-md-12 col-sm-12 text-center">
            <h2>Jazz@Patronaat</h2>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="jazzAvailabilityChart" width="800" height="450"></canvas>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="jazzIncomeChart" width="800" height="450"></canvas>
        </div>
    </div>

    <div id="jazzData" class="eventView">
        @foreach (Jazz activity in Model.Activities.OfType<Jazz>())
        {
            if (activity.TotalTickets == 0)
            {
                continue;
            }

            float totalIncome = Model.BesteldeActiviteiten.Where(a => a.Activiteit.ActivityId == activity.ActivityId).Sum(a => a.Price);
            decimal boughtPercentage;

            boughtPercentage = Math.Round((decimal)activity.BoughtTickets, 2) / Math.Round((decimal)activity.TotalTickets, 2) * 100;
            boughtPercentage = Math.Floor(boughtPercentage);

            <div class="col-md-12 eventData" id="@activity.ActivityId">
                <div class="row">
                    <div class="col-sm-6">
                        <h3>@activity.artist.ArtistName</h3>
                        <br />
                        <strong>Date: </strong> @activity.StartSession.ToString("dddd dd-MM-yyyy H:mm") - @activity.EndSession.ToString("H:mm")
                        <br />
                        <strong>Description: </strong> @Regex.Replace(activity.artist.ArtistInformation, @"<(.|\n)*?>", string.Empty)
                        <br />
                        <strong>Location: </strong> @activity.ConcertLocation
                        <br />
                        <strong>Hall: </strong> @activity.ConcertHall
                        <br />
                        <strong>Price: </strong>€ @String.Format("{0:0.00}", activity.Price)

                    </div>
                    <div class="col-sm-6">
                        <div class="col-sm-12">
                            <img src="../images/Jazz/Artiesten/@activity.artist.ArtistImage" style="max-width:100%" onError="this.src = '../images/no_image.jpg'" />
                        </div>
                        <br />
                        <div class="col-sm-12 priceMargin">
                            <div class="alert alert-info">
                                <strong>Total Income: </strong>€ @String.Format("{0:0.00}", totalIncome)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="progress progressMargin">
                    <div class="progress-bar progress-bar-danger progress-bar-striped" role="progressbar" style="width:@(boughtPercentage)%">
                        Bought Tickets: @activity.BoughtTickets
                    </div>
                    <div class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" style="width:@(100 - boughtPercentage)%">
                        Available Tickets: @(activity.TotalTickets - activity.BoughtTickets)
                    </div>
                </div>
            </div>
        }
    </div>

    <hr class="divide" />

    <!-- Charts over het Dinner in Haarlem evenement.-->
    <div class="row col-md-12">
        <div class="col-md-12 col-sm-12 text-center">
            <h2>Dinner in Haarlem</h2>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="dinnerAvailabilityChart" width="800" height="450"></canvas>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="dinnerIncomeChart" width="800" height="450"></canvas>
        </div>
    </div>

    <div id="dinnerData" class="eventView">
        @foreach (Dinner activity in Model.Activities.OfType<Dinner>())
        {
            if (activity.TotalTickets == 0)
            {
                continue;
            }

            float totalIncome = Model.BesteldeActiviteiten.Where(a => a.Activiteit.ActivityId == activity.ActivityId).Sum(a => a.Price);
            decimal boughtPercentage = Math.Round((decimal)activity.BoughtTickets, 2) / Math.Round((decimal)activity.TotalTickets, 2) * 100;
            boughtPercentage = Math.Floor(boughtPercentage);

            <div class="col-md-12 eventData" id="@activity.ActivityId">
                <div class="row">
                    <div class="col-md-6">
                        <h3>@activity.Restaurant.Naam</h3>
                        <br />
                        <strong>Description: </strong>@activity.Restaurant.Description
                        <br />
                        <strong>Date: </strong>@activity.Day.Date.ToString("dddd dd-MM-yyyy")
                        <br />
                        <strong>Session: </strong>@activity.StartSession.ToString("H:mm") - @activity.EndSession.ToString("H:mm")
                        <br />
                        <strong>Price:</strong>€ @String.Format("{0:0.00}", activity.Price)
                        <br />
                        <strong>Children Price:</strong>€ @String.Format("{0:0.00}", activity.AlternativePrice)
                    </div>
                    <div class="col-md-6">
                        <div class="col-md-12">
                            <img src="../images/Dinner/restaurants/@activity.Restaurant.LocationIMG" style="max-width:100%" onError="this.src = '../images/no_image.jpg'" />
                        </div>
                        <div class="col-md-12 priceMargin">
                            <div class="alert alert-info">
                                <strong>Total Income: </strong>€ @String.Format("{0:0.00}", totalIncome)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="progress progressMargin">
                    <div class="progress-bar progress-bar-danger progress-bar-striped" role="progressbar" style="width:@(boughtPercentage)%">
                        Bought Seats: @activity.BoughtTickets
                    </div>
                    <div class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" style="width:@(100 - boughtPercentage)%">
                        Available Seats: @(activity.TotalTickets - activity.BoughtTickets)
                    </div>
                </div>
            </div>
        }
    </div>

    <hr class="divide" />

    <!-- Charts over het Talking evenement.-->
    <div class="row col-md-12">
        <div class="col-md-12 col-sm-12 text-center">
            <h2>Talking Haarlem</h2>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="talkingAvailabilityChart" width="800" height="450"></canvas>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="talkingIncomeChart" width="800" height="450"></canvas>
        </div>
    </div>

    <div id="talkingData" class="eventView">
        @foreach (Talking activity in Model.Activities.OfType<Talking>())
        {
            if (activity.TotalTickets == 0)
            {
                continue;
            }

            float totalIncome = Model.BesteldeActiviteiten.Where(a => a.Activiteit.ActivityId == activity.ActivityId).Sum(a => a.Price);
            decimal boughtPercentage = Math.Round((decimal)activity.BoughtTickets, 2) / Math.Round((decimal)activity.TotalTickets, 2) * 100;
            boughtPercentage = Math.Floor(boughtPercentage);

            <div class="col-md-12 eventData" id="@activity.ActivityId">
                <div class="row">
                    <div class="col-md-6">
                        <h3>@activity.Talk.Naam</h3>
                        <br />
                        <strong>Participants: </strong>@activity.Talk.Person1 and @activity.Talk.Person2
                        <br />
                        <strong>Description: </strong>@activity.Talk.Description
                        <br />
                        <strong>Date: </strong>@activity.StartSession.ToString("dddd dd-MM-yyyy H:mm") - @activity.EndSession.ToString("H:mm")
                        <br />
                        <strong>Price: </strong>€ @String.Format("{0:0.00}", activity.Price)
                        <br />
                    </div>
                    <div class="col-md-6">
                        <div class="col-md-6"><img src="../images/Talking/@activity.Talk.Person1IMG" style="max-width:100%" onError="this.src = '../images/no_image.jpg'" /></div>
                        <div class="col-md-6"><img src="../images/Talking/@activity.Talk.Person2IMG" style="max-width:100%" onError="this.src = '../images/no_image.jpg'" /></div>
                        <br />
                    </div>
                    <div class="col-md-6">
                        <div class="col-md-12 priceMargin">
                            <div class="alert alert-info">
                                <strong>Total Income: </strong>€ @String.Format("{0:0.00}", totalIncome)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="progress progressMargin">
                    <div class="progress-bar progress-bar-danger progress-bar-striped" role="progressbar" style="width:@(boughtPercentage)%">
                        Bought Tickets: @activity.BoughtTickets
                    </div>
                    <div class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" style="width:@(100 - boughtPercentage)%">
                        Available Tickets: @(activity.TotalTickets - activity.BoughtTickets)
                    </div>
                </div>
            </div>
        }
    </div>

    <hr class="divide" />

    <!-- Charts over het Historic evenement.-->
    <div class="row col-md-12">
        <div class="col-md-12 col-sm-12 text-center">
            <h2>Historic Haarlem</h2>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="historicAvailabilityChart" width="800" height="450"></canvas>
        </div>
        <div class="col-md-6 col-sm-6">
            <canvas id="historicIncomeChart" width="800" height="450"></canvas>
        </div>
    </div>

    <div id="historicData" class="eventView">
        @foreach (Historic activity in Model.Activities.OfType<Historic>())
        {
            if (activity.TotalTickets == 0)
            {
                continue;
            }

            float totalIncome = Model.BesteldeActiviteiten.Where(a => a.Activiteit.ActivityId == activity.ActivityId).Sum(a => a.Price);
            decimal boughtPercentage = Math.Round((decimal)activity.BoughtTickets, 2) / Math.Round((decimal)activity.TotalTickets, 2) * 100;
            boughtPercentage = Math.Floor(boughtPercentage);

            <div class="col-md-6 eventData" id="@activity.ActivityId">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="col-sm-12">
                            <h4><strong>Tour Date: </strong>@activity.StartSession.ToString("dddd dd-MM-yyyy H:mm") - @activity.EndSession.ToString("H:mm")</h4>
                            <strong>Startlocation: </strong>@activity.Address
                            <br />
                            <strong>Guide: </strong>@activity.Guide.GuideName
                            <br />
                            <strong>Language: </strong>@activity.Guide.LanguageName (@activity.Guide.LanguageAbbr)
                            <br />
                            <strong>Price: </strong>€ @String.Format("{0:0.00}", activity.Price)
                            <br />
                            <strong>Group Price (Atleast 4 people): </strong>€ @String.Format("{0:0.00}", activity.AlternativePrice)
                            <br />
                        </div>
                        <div class="col-sm-12 priceMargin">
                            <div class="alert alert-info">
                                <strong>Total Income: </strong>€ @String.Format("{0:0.00}", totalIncome)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="progress progressMargin">
                    <div class="progress-bar progress-bar-danger progress-bar-striped" role="progressbar" style="width:@(boughtPercentage)%">
                        Bought Seats: @activity.BoughtTickets
                    </div>
                    <div class="progress-bar progress-bar-success progress-bar-striped" role="progressbar" style="width:@(100 - boughtPercentage)%">
                        Available Seats: @(activity.TotalTickets - activity.BoughtTickets)
                    </div>
                </div>
            </div>
        }
    </div>
</div>